const TELEGRAM_API = 'https://api.telegram.org/bot';
const BOT_TOKEN = '7292124945:AAE8cXZ4Tmk0ANW0RC6hI_R7IrWNZYVtpzQ'; // Your bot token
const WEBHOOK_URL = 'https://bot.geek79437.workers.dev/'; // Your provided webhook URL
const REFERRAL_KEYWORDS = ["ref", "joinchat", "invite", "t.me"];
const OPENAI_API_KEY = 'your-openai-api-key'; // Your OpenAI API key

// Function to set the webhook URL
async function setWebhook() {
    const webhookUrl = `${TELEGRAM_API}${BOT_TOKEN}/setWebhook`;

    const response = await fetch(webhookUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
            url: WEBHOOK_URL
        })
    });

    const result = await response.json();
    if (result.ok) {
        console.log('Webhook set successfully:', result);
    } else {
        console.error('Failed to set webhook:', result);
    }
}

// Function to mute the user
async function muteUser(chatId, username) {
    const muteUrl = `${TELEGRAM_API}${BOT_TOKEN}/restrictChatMember`;

    const permissions = {
        can_send_messages: false,
    };

    await fetch(muteUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
            chat_id: chatId,
            permissions: permissions
        })
    });

    // Send the notification message to the chat mentioning the username
    await sendMessage(chatId, `စောက်ဝာာသား @${username} လက်ယားမှုအတွက် Group ထဲကနေ ခွေးလို ကန်ထုတ်လ်ုက်ပြီ.`);
}

// Function to send a message via Telegram
async function sendMessage(chatId, text) {
    const sendMessageUrl = `${TELEGRAM_API}${BOT_TOKEN}/sendMessage`;

    await fetch(sendMessageUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
            chat_id: chatId,
            text: text,
            parse_mode: 'Markdown'
        })
    });
}

// Function to handle new member joining the chat
async function handleNewMembers(chatId, newMembers) {
    newMembers.forEach(async member => {
        const username = member.username || member.first_name; // Use username if available, else first name
        await sendMessage(chatId, `မင်္ဂလာပါ @${username} ! Group ထဲကိုကြိုဆိုပါတယ်။`);
    });
}

// Function to call GPT-3.5 API
async function getChatGPTResponse(userMessage) {
    const openAiResponse = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
            "Authorization": `Bearer ${OPENAI_API_KEY}`,
        },
        body: JSON.stringify({
            model: "gpt-3.5-turbo",
            messages: [{ role: "user", content: userMessage }],
        }),
    });

    const responseData = await openAiResponse.json();
    return responseData.choices[0].message.content;
}

// Handle bot commands
async function handleCommand(command, chatId) {
    switch (command) {
        case '/start':
            await sendMessage(chatId, '**မင်္ဂလာပါ ! စောက်တောသားများကို နှိမ်နင်းပေးနေတဲ့ သခင်ကြီးလာပါပြီဗျာ!**');
            break;
        case '/help':
            await sendMessage(chatId, `**Help Menu**\n\nPsiphon termux cmd ယူရန်....\n\`\`\`psiphon\n/psi\`\`\`\n\nFree Vpn Config များအတွက် termux tool cmd ရယူရန်....\n\`\`\`cfg\n/freecfg\`\`\`\n\nBug နှင့် Sni ရှာနိုင်တဲ့ termux tool cmd ရယူရန်....\n\`\`\`Tool\n/bugsni\`\`\`\n\nX-ray V2RAY subscription update link ယူရန်\n\`\`\`URL\n/sub\`\`\``);
            break;
        // Additional commands...
        default:
            await sendMessage(chatId, "Unknown command. Please use /help to see the available commands.");
    }
}

// Function to handle incoming messages
async function handleMessage(message) {
    const chatId = message.chat.id;
    const username = message.from.username || message.from.first_name;

    // Check if the message is a bot command
    if (message.text.startsWith('/')) {
        await handleCommand(message.text, chatId);
    } else if (REFERRAL_KEYWORDS.some(keyword => message.text.toLowerCase().includes(keyword))) {
        await muteUser(chatId, username);
    } else {
        // Fallback to GPT-3.5 for non-command messages
        const botReply = await getChatGPTResponse(message.text);
        await sendMessage(chatId, botReply);
    }
}

// Function to handle incoming webhook requests from Telegram
async function handleRequest(request) {
    try {
        const update = await request.json();

        // Check if new members joined the chat
        if (update.message && update.message.new_chat_members) {
            await handleNewMembers(update.message.chat.id, update.message.new_chat_members);
        }

        // Check if the update contains a message
        if (update.message && update.message.text) {
            await handleMessage(update.message);
        }

        return new Response('OK', { status: 200 });
    } catch (error) {
        console.error('Failed to process request', error);
        return new Response('Invalid request', { status: 400 });
    }
}

// Main entry point for the Cloudflare Worker
addEventListener('fetch', event => {
    event.respondWith((async () => {
        await setWebhook(); // Set webhook once during first request
        return handleRequest(event.request);
    })());
});
